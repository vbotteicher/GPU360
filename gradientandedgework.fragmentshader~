#version 300 es
precision highp float;

uniform highp float maxF;
uniform highp float minF;

in vec2 kernelCoordinate_0;
in vec2 kernelCoordinate_1;
in vec2 kernelCoordinate_2;

uniform sampler2D myTextureSampler;

uniform float convKernel_0;
uniform float convKernel_1;
uniform float convKernel_2;

const vec4 bitShInv = vec4( 1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0); 
const vec4 bitSh = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );
const vec4 bitMsk = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );

vec4 Float2RGBA(float f)
{
   //f = (254.0/254.1211)*(f - floor(f/0.125)*0.125/255.0);
   f = ( f - minF ) / ( maxF - minF ) ;
   
   vec4 res = bitSh * f;
   vec4 tmp;
   res = fract( res );   
   //res -= res.xxyz * bitMsk;
   tmp.r = res.r - res.r*bitMsk.r;
   tmp.g = res.g - res.r*bitMsk.g;
   tmp.b = res.b - res.g*bitMsk.b;
   tmp.a = res.a  - res.b*bitMsk.a;
   
   res.x -= res.x*bitMsk.x;
   res.y -= res.x*bitMsk.y;
   res.z -= res.y*bitMsk.z;
   res.w -= res.z*bitMsk.w;

   return( tmp );
} 

float RGBA2Float( vec4 v ) //must call this to do computations
{
	float f = dot(v, bitShInv);
	f = f * (maxF - minF) + minF;
	return(f);
}



layout(location = 0) out vec4 edge;
layout(location = 1) out vec4 ux;
layout(location = 2) out vec4 uy;

void main()
{

	//note vec4 for RGBA format
	vec4 textureValue_0 = round(texture( myTextureSampler, kernelCoordinate_0)*255.0)/256.0;
	vec4 textureValue_1 = round(texture( myTextureSampler, kernelCoordinate_1)*255.0)/256.0;
	vec4 textureValue_2 = round(texture( myTextureSampler, kernelCoordinate_2)*255.0)/256.0;
	
    //vec4 textureValue_0 = texture( myTextureSampler, kernelCoordinate_0);
	//vec4 textureValue_1 = texture( myTextureSampler, kernelCoordinate_1);
	//vec4 textureValue_2 = texture( myTextureSampler, kernelCoordinate_2);

    //vec4 textureFract_0 = fract(texture( myTextureSampler, kernelCoordinate_0)*255.0)/256.0;
	//vec4 textureFract_1 = fract(texture( myTextureSampler, kernelCoordinate_1)*255.0)/256.0;
	//vec4 textureFract_2 = fract(texture( myTextureSampler, kernelCoordinate_2)*255.0)/256.0;
	
    float  f0 = RGBA2Float( textureValue_0 );
    float  f1 = RGBA2Float( textureValue_1 );
	//float  f1 = RGBA2Float( vec4(0.0,0.0,0.0,0.5));
	float  f2 = RGBA2Float( textureValue_2 );
	
	//float  f3 = RGBA2Float( textureFract_0);
    //float  f4 = RGBA2Float( textureFract_1);
	//float  f1 = RGBA2Float( vec4(0.0,0.0,0.0,0.5));
	//float  f5 = RGBA2Float( textureFract_2);
	float f3 = f0*convKernel_0 + f1*convKernel_1 + f2*convKernel_2;
	//float f6 = f3*convKernel_0 + f4*convKernel_1 + f5*convKernel_2;

	color =  Float2RGBA(f3);

}
