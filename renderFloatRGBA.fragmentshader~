#version 300 es
precision highp float;

in vec2 UV;
uniform sampler2D myTextureSampler;

uniform highp float maxF;
uniform highp float minF;

/*const vec4 bitShInv = vec4( 1.0 *255.0, 1.0*255.0*256.0 , 1.0*255.0*256.0*256.0, 1.0*255.0*256.0*256.0*256.0); 
const vec4 bitSh = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );
const vec4 bitMsk = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );

vec4 Float2RGBA(float f)
{
   f = ( f - minF ) / ( maxF - minF ) ;
   vec4 fvec = vec4(f,f,f,f);

   vec4 res = bitSh * f;
   res = fract( res );   
   //res -= res.xxyz * bitMsk;
   res.x -= res.x*bitMsk.x;
   res.y -= res.x*bitMsk.y;
   res.z -= res.y*bitMsk.z;
   res.w -= res.z*bitMsk.w;

   return( res );
} 

float RGBA2Float( vec4 v ) //must call this to do computations
{
	float f = dot(v, bitShInv);
	f = f * (maxF - minF)/(256.0*256.0*256.0*256.0) + minF;
	return(f);
}*/

const vec4 bitShInv = vec4( 1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0); 
const vec4 bitSh = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );
const vec4 bitMsk = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );

vec4 Float2RGBA(float f)
{
   //f = (254.0/254.1211)*(f - floor(f/0.125)*0.125/255.0);
   f = ( f - minF ) / ( maxF - minF ) ;
   vec4 res = bitSh * f;
   res = fract( res );   
   res -= res.xxyz * bitMsk;
   //res.x -= res.x*bitMsk.x;
   //res.y -= res.x*bitMsk.y;
   //res.z -= res.y*bitMsk.z;
   //res.w -= res.z*bitMsk.w;

   return( res );
} 

float RGBA2Float( vec4 v ) //must call this to do computations
{
	float f = dot(v, bitShInv);
	f = f * (maxF - minF) + minF;
	//return(f*255.0/256.0);
	return(f);
}

layout(location = 0) out vec4 color;
void main()
{
	vec4 texel = round(256.0*texture( myTextureSampler, UV))/256.0;
	float f = RGBA2Float( texel );
	f = clamp(f, 0.0, 1.0 );
	color = vec4( f, f, f, 1.0);
}
