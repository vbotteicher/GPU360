#version 300 es
precision highp float;


uniform sampler2D myTextureSampler;

uniform highp float maxF;
uniform highp float minF;

in highp vec2 UV;

const highp vec4 bitShInv = vec4( 1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0); 
const highp vec4 bitSh = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );
const highp vec4 bitMsk = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );

vec4 Float2RGBA(float f)
{
   //f = (254.0/254.1211)*(f - floor(f/0.125)*0.125/255.0);
   f = ( f - minF ) / ( maxF - minF ) ;
   highp vec4 res = bitSh * f;
   res = fract( res );   
   res -= res.xxyz * bitMsk;
   //res.x -= res.x*bitMsk.x;
   //res.y -= res.x*bitMsk.y;
   //res.z -= res.y*bitMsk.z;
   //res.w -= res.z*bitMsk.w;

   return( res );
} 

float RGBA2Float( vec4 v ) //must call this to do computations
{
	float f = dot(v, bitShInv);
	f = f * (maxF - minF) + minF;
	return(f);
}

layout(location = 0) out vec4 color;

void main()
{ 
	vec4 luminance = texture( myTextureSampler, UV );
	//color = clamp(Float2RGBA( (254.0/254.1211)*(luminance.x - 
	//floor(luminance.x/0.125)*0.125/255.0)), 0.0, 1.0 );
	//color = clamp(Float2RGBA( luminance.x ), 0.0, 0.999 );
	color = Float2RGBA(1.0/((512.0*(UV.y+1.0/1024.0))) );
	//color = Float2RGBA(UV.x);//-1.0/1024.0);
	//color = Float2RGBA(1.0/((512.0)*(128.0)) );
	//color = round( 255.0 * color ) / 258.0;
	//	float temp = RGBA2Float(color);
//	color = vec4(temp,temp,temp,temp);
	//color = luminance;
}
